/**
  Copyright 2022 Mia srl

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
import { writeFile } from 'fs/promises'
import { resolve, dirname } from 'path'
import { fileURLToPath } from 'url'

import type { Options } from 'json-schema-to-typescript'
import { compileFromFile } from 'json-schema-to-typescript'

const __dirname = dirname(fileURLToPath(import.meta.url))

const TYPES_FILE_NAME = 'index.d.ts'

const bannerComment = '/* eslint-disable */\n/**\n* This file was automatically generated by json-schema-to-typescript.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run `yarn make-types` to regenerate this file.\n*/'

interface CompileSchemaProps {
  schemaDirName: string
  schemaDirPath: string
  schemaFileName: string
}

const compileSchema = async ({ schemaDirPath, schemaDirName, schemaFileName }: CompileSchemaProps) => {
  const inputFilePath = resolve(schemaDirPath, schemaFileName)
  const outputFilePath = resolve(schemaDirPath, TYPES_FILE_NAME)

  try {
    const compileProps: Partial<Options> = {
      $refOptions: { resolve: { external: true } },
      bannerComment,
      style: { semi: false },
    }

    const compiledTypes = await compileFromFile(inputFilePath, compileProps)

    await writeFile(outputFilePath, compiledTypes)

    console.log('\x1b[32m%s\x1b[0m', `✔ ${schemaDirName}/${schemaFileName} compiled successfully`)
  } catch (err) {
    console.log('\x1b[31m%s\x1b[0m', `✖ Failed compiling ${schemaDirName}/${schemaFileName}`)
    console.error(err)
  }
}

const main = async () => {
  const schemasToCompileProps: CompileSchemaProps[] = [
    {
      schemaDirName: 'lang',
      schemaDirPath: resolve(__dirname, '../src/lang'),
      schemaFileName: 'lang.schema.json',
    },
  ]

  const compileSchemaPromises = schemasToCompileProps.map(props => compileSchema(props))

  await Promise.all(compileSchemaPromises)
}

main().catch(err => console.error(err))
